{"ast":null,"code":"//UserContext.js - Use this context to share values between components without explicitly passing values between components\nimport React,{createContext,useState,useEffect}from'react';// Create the context object\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const UserContext=/*#__PURE__*/createContext(null);// Create a provider component that wraps your app\nexport const UserProvider=_ref=>{let{children}=_ref;const[username,setUsername]=useState(null);const[isGuest,setIsGuest]=useState(null);// Fetch the username from your Flask API when the app loads\nuseEffect(()=>{fetch('/api/user-info',{method:'GET',credentials:'include',// Send cookies with request (important for Flask sessions)\nheaders:{'Content-Type':'application/json'}}).then(res=>{if(!res.ok)throw new Error('Not logged in');return res.json();}).then(data=>{setUsername(data.username);// Save the username in state\nsetIsGuest(data.is_guest);}).catch(()=>{setUsername(null);// Clear username if there's an error\nsetIsGuest(null);});},[]);return/*#__PURE__*/_jsx(UserContext.Provider,{value:{username,isGuest},children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","jsx","_jsx","UserContext","UserProvider","_ref","children","username","setUsername","isGuest","setIsGuest","fetch","method","credentials","headers","then","res","ok","Error","json","data","is_guest","catch","Provider","value"],"sources":["/home/ayoo1131/guitar_note_to_tabs/my_app/dashboard/applications/applied_jobs/frontend/src/context/UserContext.js"],"sourcesContent":["//UserContext.js - Use this context to share values between components without explicitly passing values between components\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create the context object\nexport const UserContext = createContext(null);\n\n// Create a provider component that wraps your app\nexport const UserProvider = ({ children }) => {\n  \tconst [username, setUsername] = useState(null);\n\tconst [isGuest, setIsGuest] = useState(null);\n\n \t// Fetch the username from your Flask API when the app loads\n  \tuseEffect(() => {\n    \t\tfetch('/api/user-info', {\n \t\t\tmethod: 'GET',\n      \t\t\tcredentials: 'include', // Send cookies with request (important for Flask sessions)\n      \t\t\theaders: {\n        \t\t\t'Content-Type': 'application/json',\n      \t\t\t},\n    \t\t})\n      \n\t\t.then((res) => {\n        \t\tif (!res.ok) throw new Error('Not logged in');\n        \t\treturn res.json();\n      \t\t})\n      \t\n\t\t.then((data) => {\n        \t\tsetUsername(data.username); // Save the username in state\n      \t\t\tsetIsGuest(data.is_guest);\n\t\t})\n      \n\t\t.catch(() => {\n \t\t\tsetUsername(null); // Clear username if there's an error\n\t\t\tsetIsGuest(null);\n      \t\t});\n  \t}, []);\n\n  \treturn (\n    \t\t<UserContext.Provider value={{ username, isGuest }}>\n      \t\t\t{children}\n    \t\t</UserContext.Provider>\n  \t);\n};\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAEjE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,MAAO,MAAM,CAAAC,WAAW,cAAGL,aAAa,CAAC,IAAI,CAAC,CAE9C;AACA,MAAO,MAAM,CAAAM,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACtC,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAACU,OAAO,CAAEC,UAAU,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CAE3C;AACCC,SAAS,CAAC,IAAM,CACbW,KAAK,CAAC,gBAAgB,CAAE,CAC1BC,MAAM,CAAE,KAAK,CACRC,WAAW,CAAE,SAAS,CAAE;AACxBC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACH,CAAC,CAAC,CAELC,IAAI,CAAEC,GAAG,EAAK,CACP,GAAI,CAACA,GAAG,CAACC,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,eAAe,CAAC,CAC7C,MAAO,CAAAF,GAAG,CAACG,IAAI,CAAC,CAAC,CACnB,CAAC,CAAC,CAEPJ,IAAI,CAAEK,IAAI,EAAK,CACRZ,WAAW,CAACY,IAAI,CAACb,QAAQ,CAAC,CAAE;AAC7BG,UAAU,CAACU,IAAI,CAACC,QAAQ,CAAC,CAChC,CAAC,CAAC,CAEDC,KAAK,CAAC,IAAM,CACXd,WAAW,CAAC,IAAI,CAAC,CAAE;AACpBE,UAAU,CAAC,IAAI,CAAC,CACX,CAAC,CAAC,CACP,CAAC,CAAE,EAAE,CAAC,CAEN,mBACGR,IAAA,CAACC,WAAW,CAACoB,QAAQ,EAACC,KAAK,CAAE,CAAEjB,QAAQ,CAAEE,OAAQ,CAAE,CAAAH,QAAA,CAC/CA,QAAQ,CACU,CAAC,CAE7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}