{"ast":null,"code":"//ValidateInput.js\nimport React from'react';export const validateUserInput=userInput=>{const errors={};//creates an error object that stores errors of user input\nlet isValid=true;let companyError=validateCompany(userInput.company);if(companyError!=null){errors.company=companyError;}let positionError=validatePosition(userInput.position);if(positionError!=null){errors.position=positionError;}let dateError=validateDate(userInput.date);if(dateError!=null){errors.date=dateError;}//let locationError = validateLocation(userInput.location)\n//if (locationError != null){\n//\terrors.location = locationError;\n//}\n//let urlError = validateURL(userInput.url)\n//if (urlError != null){\n//\terrors.url = urlError;\n//}\nreturn errors;};const isOnlySpaces=inputString=>{//Returns true if string is only spaces or blank\nreturn /^\\s*$/.test(inputString);};const validateCompany=company=>{const companyLength=company.length;if(companyLength==0||isOnlySpaces(company)){return\"Enter a company\";}else if(companyLength>40){return\"Company must be 40 characters or less\";}};const validatePosition=position=>{const positionLength=position.length;if(positionLength==0||isOnlySpaces(position)){return\"Enter a position\";}else if(positionLength>40){return\"Position must be 40 characters or less\";}};const validateDate=date=>{console.log(date);};const validateLocation=location=>{console.log(location);};const validateURL=url=>{console.log(url);};","map":{"version":3,"names":["React","validateUserInput","userInput","errors","isValid","companyError","validateCompany","company","positionError","validatePosition","position","dateError","validateDate","date","isOnlySpaces","inputString","test","companyLength","length","positionLength","console","log","validateLocation","location","validateURL","url"],"sources":["/home/ayoo1131/guitar_note_to_tabs/my_app/dashboard/applications/applied_jobs/src/components/body/utils/user_input/ValidateUserInput.js"],"sourcesContent":["//ValidateInput.js\n\nimport React from 'react';\n\nexport const validateUserInput = (userInput) => {\n\tconst errors = {}; //creates an error object that stores errors of user input\n\tlet isValid=true;\n\n\tlet companyError = validateCompany(userInput.company)\n\tif (companyError != null){\n\t\terrors.company = companyError;\n\t}\n\n\tlet positionError = validatePosition(userInput.position)\n\tif (positionError != null){\n\t\terrors.position = positionError;\n\t}\n\n\tlet dateError = validateDate(userInput.date)\n\tif (dateError != null){\n\t\terrors.date = dateError;\n\t}\n\n\t//let locationError = validateLocation(userInput.location)\n\t//if (locationError != null){\n\t//\terrors.location = locationError;\n\t//}\n\n\t//let urlError = validateURL(userInput.url)\n\t//if (urlError != null){\n\t//\terrors.url = urlError;\n\t//}\n\n\treturn errors;\n};\n\nconst isOnlySpaces = (inputString) => { //Returns true if string is only spaces or blank\n\treturn /^\\s*$/.test(inputString);\n};\n\nconst validateCompany = (company) => {\n        const companyLength = company.length;\n\n        if (companyLength == 0 || isOnlySpaces(company)){\n                return(\"Enter a company\");\n        }\n\n        else if (companyLength > 40){\n                return(\"Company must be 40 characters or less\");\n        }\n};\n\nconst validatePosition = (position) => {\n\tconst positionLength = position.length;\n\n\tif (positionLength == 0 || isOnlySpaces(position)){\n\t\treturn(\"Enter a position\");\n\t}\n\n\telse if (positionLength > 40){\n\t\treturn(\"Position must be 40 characters or less\");\n\t}\n};\n\nconst validateDate = (date) =>{\n\tconsole.log(date);\n};\n\nconst validateLocation = (location) => {\n\tconsole.log(location)\n};\n\nconst validateURL = (url) => {\n\tconsole.log(url)\n};\n\n\n\n\n\n\n\n"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,MAAO,MAAM,CAAAC,iBAAiB,CAAIC,SAAS,EAAK,CAC/C,KAAM,CAAAC,MAAM,CAAG,CAAC,CAAC,CAAE;AACnB,GAAI,CAAAC,OAAO,CAAC,IAAI,CAEhB,GAAI,CAAAC,YAAY,CAAGC,eAAe,CAACJ,SAAS,CAACK,OAAO,CAAC,CACrD,GAAIF,YAAY,EAAI,IAAI,CAAC,CACxBF,MAAM,CAACI,OAAO,CAAGF,YAAY,CAC9B,CAEA,GAAI,CAAAG,aAAa,CAAGC,gBAAgB,CAACP,SAAS,CAACQ,QAAQ,CAAC,CACxD,GAAIF,aAAa,EAAI,IAAI,CAAC,CACzBL,MAAM,CAACO,QAAQ,CAAGF,aAAa,CAChC,CAEA,GAAI,CAAAG,SAAS,CAAGC,YAAY,CAACV,SAAS,CAACW,IAAI,CAAC,CAC5C,GAAIF,SAAS,EAAI,IAAI,CAAC,CACrBR,MAAM,CAACU,IAAI,CAAGF,SAAS,CACxB,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,MAAO,CAAAR,MAAM,CACd,CAAC,CAED,KAAM,CAAAW,YAAY,CAAIC,WAAW,EAAK,CAAE;AACvC,MAAO,QAAO,CAACC,IAAI,CAACD,WAAW,CAAC,CACjC,CAAC,CAED,KAAM,CAAAT,eAAe,CAAIC,OAAO,EAAK,CAC7B,KAAM,CAAAU,aAAa,CAAGV,OAAO,CAACW,MAAM,CAEpC,GAAID,aAAa,EAAI,CAAC,EAAIH,YAAY,CAACP,OAAO,CAAC,CAAC,CACxC,MAAO,iBAAiB,CAChC,CAAC,IAEI,IAAIU,aAAa,CAAG,EAAE,CAAC,CACpB,MAAO,uCAAuC,CACtD,CACR,CAAC,CAED,KAAM,CAAAR,gBAAgB,CAAIC,QAAQ,EAAK,CACtC,KAAM,CAAAS,cAAc,CAAGT,QAAQ,CAACQ,MAAM,CAEtC,GAAIC,cAAc,EAAI,CAAC,EAAIL,YAAY,CAACJ,QAAQ,CAAC,CAAC,CACjD,MAAO,kBAAkB,CAC1B,CAAC,IAEI,IAAIS,cAAc,CAAG,EAAE,CAAC,CAC5B,MAAO,wCAAwC,CAChD,CACD,CAAC,CAED,KAAM,CAAAP,YAAY,CAAIC,IAAI,EAAI,CAC7BO,OAAO,CAACC,GAAG,CAACR,IAAI,CAAC,CAClB,CAAC,CAED,KAAM,CAAAS,gBAAgB,CAAIC,QAAQ,EAAK,CACtCH,OAAO,CAACC,GAAG,CAACE,QAAQ,CAAC,CACtB,CAAC,CAED,KAAM,CAAAC,WAAW,CAAIC,GAAG,EAAK,CAC5BL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC,CACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}