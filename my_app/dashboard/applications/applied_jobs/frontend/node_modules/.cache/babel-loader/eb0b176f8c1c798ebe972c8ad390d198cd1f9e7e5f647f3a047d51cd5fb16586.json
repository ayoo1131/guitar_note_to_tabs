{"ast":null,"code":"//ValidateInput.js\nimport React from'react';export const validateUserInput=userInput=>{const errors={};//creates an error object that stores errors of user input\nlet isValid=true;let companyError=validateCompany(userInput.company);if(companyError!=null){errors.company=companyError;}let positionError=validatePosition(userInput.position);if(positionError!=null){errors.position=positionError;}let dateError=validateDate(userInput.date);if(dateError!=null){errors.date=dateError;}let locationError=validateLocation(userInput.location);if(locationError!=null){errors.location=locationError;}let urlError=validateURL(userInput.url);if(urlError!=null){errors.url=urlError;}return errors;};const isOnlySpaces=inputString=>{//Returns true if string is only spaces or blank\nreturn /^\\s*$/.test(inputString);};const validateCompany=company=>{const companyLength=company.length;if(companyLength==0||isOnlySpaces(company)){return\"Enter a company\";}else if(companyLength>40){return\"Company must be 40 characters or less\";}};const validatePosition=position=>{const positionLength=position.length;if(positionLength==0||isOnlySpaces(position)){return\"Enter a position\";}else if(positionLength>40){return\"Position must be 40 characters or less\";}};const validateDate=date=>{//Check if date is none, check if date is in the future\nconst todayDate=new Date();let day=todayDate.getDate();let month=todayDate.getMonth()+1;//goes from 0-11\nlet year=todayDate.getFullYear();// This arrangement can be altered based on how we want the date's format to appear.\nlet currentDate=`${day}-${month}-${year}`;//DD-MM-YYYY\nconsole.log(currentDate);console.log(date);};const validateLocation=location=>{};const validateURL=url=>{};","map":{"version":3,"names":["React","validateUserInput","userInput","errors","isValid","companyError","validateCompany","company","positionError","validatePosition","position","dateError","validateDate","date","locationError","validateLocation","location","urlError","validateURL","url","isOnlySpaces","inputString","test","companyLength","length","positionLength","todayDate","Date","day","getDate","month","getMonth","year","getFullYear","currentDate","console","log"],"sources":["/home/ayoo1131/guitar_note_to_tabs/my_app/dashboard/applications/applied_jobs/src/components/body/utils/user_input/ValidateUserInput.js"],"sourcesContent":["//ValidateInput.js\n\nimport React from 'react';\n\nexport const validateUserInput = (userInput) => {\n\tconst errors = {}; //creates an error object that stores errors of user input\n\tlet isValid=true;\n\n\tlet companyError = validateCompany(userInput.company)\n\tif (companyError != null){\n\t\terrors.company = companyError;\n\t}\n\n\tlet positionError = validatePosition(userInput.position)\n\tif (positionError != null){\n\t\terrors.position = positionError;\n\t}\n\n\tlet dateError = validateDate(userInput.date)\n\tif (dateError != null){\n\t\terrors.date = dateError;\n\t}\n\n\tlet locationError = validateLocation(userInput.location)\n\tif (locationError != null){\n\t\terrors.location = locationError;\n\t}\n\n\tlet urlError = validateURL(userInput.url)\n\tif (urlError != null){\n\t\terrors.url = urlError;\n\t}\n\treturn errors;\n};\n\nconst isOnlySpaces = (inputString) => { //Returns true if string is only spaces or blank\n\treturn /^\\s*$/.test(inputString);\n};\n\nconst validateCompany = (company) => {\n        const companyLength = company.length;\n\n        if (companyLength == 0 || isOnlySpaces(company)){\n                return(\"Enter a company\");\n        }\n\n        else if (companyLength > 40){\n                return(\"Company must be 40 characters or less\");\n        }\n};\n\nconst validatePosition = (position) => {\n\tconst positionLength = position.length;\n\n\tif (positionLength == 0 || isOnlySpaces(position)){\n\t\treturn(\"Enter a position\");\n\t}\n\n\telse if (positionLength > 40){\n\t\treturn(\"Position must be 40 characters or less\");\n\t}\n};\n\nconst validateDate = (date) =>{\n\t//Check if date is none, check if date is in the future\n\tconst todayDate = new Date();\n\n\tlet day = todayDate.getDate();\n\tlet month = todayDate.getMonth() + 1;//goes from 0-11\n\tlet year = todayDate.getFullYear();\n\n\t// This arrangement can be altered based on how we want the date's format to appear.\n\tlet currentDate = `${day}-${month}-${year}`; //DD-MM-YYYY\n\tconsole.log(currentDate);\n\tconsole.log(date)\n};\n\nconst validateLocation = (location) => {\n};\n\nconst validateURL = (url) => {\n};\n\n\n\n\n\n\n\n"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,MAAO,MAAM,CAAAC,iBAAiB,CAAIC,SAAS,EAAK,CAC/C,KAAM,CAAAC,MAAM,CAAG,CAAC,CAAC,CAAE;AACnB,GAAI,CAAAC,OAAO,CAAC,IAAI,CAEhB,GAAI,CAAAC,YAAY,CAAGC,eAAe,CAACJ,SAAS,CAACK,OAAO,CAAC,CACrD,GAAIF,YAAY,EAAI,IAAI,CAAC,CACxBF,MAAM,CAACI,OAAO,CAAGF,YAAY,CAC9B,CAEA,GAAI,CAAAG,aAAa,CAAGC,gBAAgB,CAACP,SAAS,CAACQ,QAAQ,CAAC,CACxD,GAAIF,aAAa,EAAI,IAAI,CAAC,CACzBL,MAAM,CAACO,QAAQ,CAAGF,aAAa,CAChC,CAEA,GAAI,CAAAG,SAAS,CAAGC,YAAY,CAACV,SAAS,CAACW,IAAI,CAAC,CAC5C,GAAIF,SAAS,EAAI,IAAI,CAAC,CACrBR,MAAM,CAACU,IAAI,CAAGF,SAAS,CACxB,CAEA,GAAI,CAAAG,aAAa,CAAGC,gBAAgB,CAACb,SAAS,CAACc,QAAQ,CAAC,CACxD,GAAIF,aAAa,EAAI,IAAI,CAAC,CACzBX,MAAM,CAACa,QAAQ,CAAGF,aAAa,CAChC,CAEA,GAAI,CAAAG,QAAQ,CAAGC,WAAW,CAAChB,SAAS,CAACiB,GAAG,CAAC,CACzC,GAAIF,QAAQ,EAAI,IAAI,CAAC,CACpBd,MAAM,CAACgB,GAAG,CAAGF,QAAQ,CACtB,CACA,MAAO,CAAAd,MAAM,CACd,CAAC,CAED,KAAM,CAAAiB,YAAY,CAAIC,WAAW,EAAK,CAAE;AACvC,MAAO,QAAO,CAACC,IAAI,CAACD,WAAW,CAAC,CACjC,CAAC,CAED,KAAM,CAAAf,eAAe,CAAIC,OAAO,EAAK,CAC7B,KAAM,CAAAgB,aAAa,CAAGhB,OAAO,CAACiB,MAAM,CAEpC,GAAID,aAAa,EAAI,CAAC,EAAIH,YAAY,CAACb,OAAO,CAAC,CAAC,CACxC,MAAO,iBAAiB,CAChC,CAAC,IAEI,IAAIgB,aAAa,CAAG,EAAE,CAAC,CACpB,MAAO,uCAAuC,CACtD,CACR,CAAC,CAED,KAAM,CAAAd,gBAAgB,CAAIC,QAAQ,EAAK,CACtC,KAAM,CAAAe,cAAc,CAAGf,QAAQ,CAACc,MAAM,CAEtC,GAAIC,cAAc,EAAI,CAAC,EAAIL,YAAY,CAACV,QAAQ,CAAC,CAAC,CACjD,MAAO,kBAAkB,CAC1B,CAAC,IAEI,IAAIe,cAAc,CAAG,EAAE,CAAC,CAC5B,MAAO,wCAAwC,CAChD,CACD,CAAC,CAED,KAAM,CAAAb,YAAY,CAAIC,IAAI,EAAI,CAC7B;AACA,KAAM,CAAAa,SAAS,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAE5B,GAAI,CAAAC,GAAG,CAAGF,SAAS,CAACG,OAAO,CAAC,CAAC,CAC7B,GAAI,CAAAC,KAAK,CAAGJ,SAAS,CAACK,QAAQ,CAAC,CAAC,CAAG,CAAC,CAAC;AACrC,GAAI,CAAAC,IAAI,CAAGN,SAAS,CAACO,WAAW,CAAC,CAAC,CAElC;AACA,GAAI,CAAAC,WAAW,CAAG,GAAGN,GAAG,IAAIE,KAAK,IAAIE,IAAI,EAAE,CAAE;AAC7CG,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC,CACxBC,OAAO,CAACC,GAAG,CAACvB,IAAI,CAAC,CAClB,CAAC,CAED,KAAM,CAAAE,gBAAgB,CAAIC,QAAQ,EAAK,CACvC,CAAC,CAED,KAAM,CAAAE,WAAW,CAAIC,GAAG,EAAK,CAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}