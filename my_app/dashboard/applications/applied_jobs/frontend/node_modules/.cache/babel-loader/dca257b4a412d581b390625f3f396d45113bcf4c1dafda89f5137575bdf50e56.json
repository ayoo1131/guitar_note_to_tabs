{"ast":null,"code":"//ValidateInput.js\nimport React from'react';export const validateUserInput=userInput=>{const errors={};//creates an error object that stores errors of user input\nlet isValid=true;let companyError=validateCompany(userInput.company);if(companyError!=null){errors.company=companyError;}let positionError=validatePosition(userInput.position);if(positionError!=null){errors.position=positionError;}let dateError=validateDate(userInput.date);if(dateError!=null){errors.date=dateError;}let locationError=validateLocation(userInput.location);if(locationError!=null){errors.location=locationError;}let urlError=validateURL(userInput.url);if(urlError!=null){errors.url=urlError;}return errors;};const isOnlySpaces=inputString=>{//Returns true if string is only spaces or blank\nreturn /^\\s*$/.test(inputString);};const validateCompany=company=>{const companyLength=company.length;if(companyLength==0||isOnlySpaces(company)){return\"Enter a company\";}else if(companyLength>40){return\"Company must be 40 characters or less\";}};const validatePosition=position=>{const positionLength=position.length;if(positionLength==0||isOnlySpaces(position)){return\"Enter a position\";}else if(positionLength>40){return\"Position must be 40 characters or less\";}};const validateDate=date=>{//Check if date is none, check if date is in the future\nconst todayDate=getTodayDate();const userDate=parseUserDate(date);if(date==\"\"){return\"Enter a date\";}if(userDate.year>todayDate.year){return\"Date cannot be in the future\";}else if(userDate.year===todayDate.year&&userDate.month>todayDate.month){return\"Date cannot be in the future\";}else if(userDate.year===todayDate.year&&userDate.month===todayDate.month&&userDate.day>todayDate.day){return\"Date cannot be in the future\";}};const getTodayDate=()=>{const todayDate=new Date();const todayObject={day:null,month:null,year:null};todayObject.day=todayDate.getDate();todayObject.month=todayDate.getMonth()+1;//goes from 0-11\ntodayObject.year=todayDate.getFullYear();return todayObject;};const parseUserDate=date=>{const dateArray=date.split('-');const dateObject={day:null,month:null,year:null};dateObject.day=parseInt(dateArray[2]);dateObject.month=parseInt(dateArray[1]);dateObject.year=parseInt(dateArray[0]);return dateObject;};const validateLocation=location=>{const locationLength=location.length;if(locationLength==0||isOnlySpaces(location)){return\"Enter a location\";}else if(locationLength>40){return\"Location must be 40 characters or less\";}};const validateURL=url=>{const urlLength=url.length;if(urlLength==0||isOnlySpaces(url)){return\"Enter a url\";}else if(urlLength>100){return\"url must be 40 characters or less\";}};","map":{"version":3,"names":["React","validateUserInput","userInput","errors","isValid","companyError","validateCompany","company","positionError","validatePosition","position","dateError","validateDate","date","locationError","validateLocation","location","urlError","validateURL","url","isOnlySpaces","inputString","test","companyLength","length","positionLength","todayDate","getTodayDate","userDate","parseUserDate","year","month","day","Date","todayObject","getDate","getMonth","getFullYear","dateArray","split","dateObject","parseInt","locationLength","urlLength"],"sources":["/home/ayoo1131/guitar_note_to_tabs/my_app/dashboard/applications/applied_jobs/src/components/body/utils/user_input/ValidateUserInput.js"],"sourcesContent":["//ValidateInput.js\n\nimport React from 'react';\n\nexport const validateUserInput = (userInput) => {\n\tconst errors = {}; //creates an error object that stores errors of user input\n\tlet isValid=true;\n\n\tlet companyError = validateCompany(userInput.company)\n\tif (companyError != null){\n\t\terrors.company = companyError;\n\t}\n\n\tlet positionError = validatePosition(userInput.position)\n\tif (positionError != null){\n\t\terrors.position = positionError;\n\t}\n\n\tlet dateError = validateDate(userInput.date)\n\tif (dateError != null){\n\t\terrors.date = dateError;\n\t}\n\n\tlet locationError = validateLocation(userInput.location)\n\tif (locationError != null){\n\t\terrors.location = locationError;\n\t}\n\n\tlet urlError = validateURL(userInput.url)\n\tif (urlError != null){\n\t\terrors.url = urlError;\n\t}\n\treturn errors;\n};\n\nconst isOnlySpaces = (inputString) => { //Returns true if string is only spaces or blank\n\treturn /^\\s*$/.test(inputString);\n};\n\nconst validateCompany = (company) => {\n        const companyLength = company.length;\n\n        if (companyLength == 0 || isOnlySpaces(company)){\n                return(\"Enter a company\");\n        }\n\n        else if (companyLength > 40){\n                return(\"Company must be 40 characters or less\");\n        }\n};\n\nconst validatePosition = (position) => {\n\tconst positionLength = position.length;\n\n\tif (positionLength == 0 || isOnlySpaces(position)){\n\t\treturn(\"Enter a position\");\n\t}\n\n\telse if (positionLength > 40){\n\t\treturn(\"Position must be 40 characters or less\");\n\t}\n};\n\nconst validateDate = (date) =>{\n\t//Check if date is none, check if date is in the future\n\tconst todayDate = getTodayDate();\n\tconst userDate = parseUserDate(date);\n\n\tif (date == \"\"){\n\t\treturn (\"Enter a date\");\n\t}\n\n\tif (userDate.year > todayDate.year){\n\t\treturn (\"Date cannot be in the future\");\n\t}\n\n\telse if (userDate.year===todayDate.year && userDate.month > todayDate.month){\n\t\treturn (\"Date cannot be in the future\");\n\t}\n\n\telse if ( userDate.year===todayDate.year && userDate.month===todayDate.month && userDate.day > todayDate.day){\n\t\treturn (\"Date cannot be in the future\");\n\t}\n};\n\nconst getTodayDate = () =>{\n\tconst todayDate = new Date();\n\tconst todayObject={day:null, month:null, year:null};\n\t\t\n        todayObject.day= todayDate.getDate();\n\ttodayObject.month = todayDate.getMonth() + 1;//goes from 0-11\n        todayObject.year = todayDate.getFullYear();\n\t\n\treturn(todayObject);\n};\n\nconst parseUserDate = (date) =>{\n\tconst dateArray = date.split('-');\n\tconst dateObject = {day:null, month:null, year:null};\n\n\tdateObject.day = parseInt(dateArray[2]);\n\tdateObject.month = parseInt(dateArray[1]);\n\tdateObject.year = parseInt(dateArray[0]);\n\n\treturn(dateObject);\n};\n\nconst validateLocation = (location) => {\n\tconst locationLength = location.length;\n\n        if (locationLength == 0 || isOnlySpaces(location)){\n                return(\"Enter a location\");\n        }\n\n        else if (locationLength > 40){\n                return(\"Location must be 40 characters or less\");\n        }\n};\n\nconst validateURL = (url) => {\n\tconst urlLength = url.length;\n\n        if (urlLength == 0 || isOnlySpaces(url)){\n                return(\"Enter a url\");\n        }\n\n        else if (urlLength > 100){\n                return(\"url must be 40 characters or less\");\n        }\n};\n\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}